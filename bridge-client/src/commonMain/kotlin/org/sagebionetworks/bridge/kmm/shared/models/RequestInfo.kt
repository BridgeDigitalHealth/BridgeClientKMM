/**
* Bridge Server API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 0.25.15
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package org.sagebionetworks.bridge.kmm.shared.models

import org.sagebionetworks.bridge.kmm.shared.models.ClientInfo
import kotlinx.serialization.Serializable






import kotlinx.serialization.SerialName


/**
 * Some basic information is captured when a participant makes a request to the Bridge server, mostly for the purpose of troubleshooting user issues with the app. Questions that can be answered include:  * what version of the app is this participant using? * what filtering criteria might be applied to their requests? * when was the last time they uploaded data or retrieved activities? * do they have a session right now, or have they contacted the server recently at all?  This information is cached but not persisted; it is not guaranteed to be present for all active users. 
 * @param userId The user's account ID.
 * @param clientInfo 
 * @param userAgent The `User-Agent` header exactly as it was sent to the server, whether it is parseable by the Bridge server or not.  
 * @param languages The language or languages sent in the user's `Accept-Language` header and persisted as part of the participant's account configuration, as they were set at the time of the last request. 
 * @param userDataGroups The data groups assigned to this participant at the time of the last request.
 * @param userStudyIds The study IDs that this participant is enrolled in.
 * @param activitiesAccessedOn The last recorded time the participant's application requested scheduled activities from the server.
 * @param timelineAccessedOn The last recorded time the participant's application requested timeline information (either the timeline or the recent study activity events) from the server.
 * @param signedInOn The last recorded time the participant signed in to the server.
 * @param uploadedOn The last recorded time the participant started an upload to the server.
 * @param timeZone The user's time zone at the time of the last request.
 * @param type RequestInfo
 */
@Serializable
public data class RequestInfo (
    /* The user's account ID. */
    
    @SerialName("userId")
    val userId: kotlin.String? = null,
    
    @SerialName("clientInfo")
    val clientInfo: ClientInfo? = null,
    /* The `User-Agent` header exactly as it was sent to the server, whether it is parseable by the Bridge server or not.   */
    
    @SerialName("userAgent")
    val userAgent: kotlin.String? = null,
    /* The language or languages sent in the user's `Accept-Language` header and persisted as part of the participant's account configuration, as they were set at the time of the last request.  */
    
    @SerialName("languages")
    val languages: kotlin.collections.List<kotlin.String>? = null,
    /* The data groups assigned to this participant at the time of the last request. */
    
    @SerialName("userDataGroups")
    val userDataGroups: kotlin.collections.List<kotlin.String>? = null,
    /* The study IDs that this participant is enrolled in. */
    
    @SerialName("userStudyIds")
    val userStudyIds: kotlin.collections.List<kotlin.String>? = null,
    /* The last recorded time the participant's application requested scheduled activities from the server. */
    
    @SerialName("activitiesAccessedOn")
    val activitiesAccessedOn: kotlin.String? = null,
    /* The last recorded time the participant's application requested timeline information (either the timeline or the recent study activity events) from the server. */
    
    @SerialName("timelineAccessedOn")
    val timelineAccessedOn: kotlin.String? = null,
    /* The last recorded time the participant signed in to the server. */
    
    @SerialName("signedInOn")
    val signedInOn: kotlin.String? = null,
    /* The last recorded time the participant started an upload to the server. */
    
    @SerialName("uploadedOn")
    val uploadedOn: kotlin.String? = null,
    /* The user's time zone at the time of the last request. */
    
    @SerialName("timeZone")
    val timeZone: kotlin.String? = null,
    /* RequestInfo */
    
    @SerialName("type")
    val type: kotlin.String? = null

) {

}

