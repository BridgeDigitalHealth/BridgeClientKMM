/**
* Bridge Server API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 0.23.30
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package org.sagebionetworks.bridge.kmm.shared.models


import kotlinx.serialization.EncodeDefault
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable


/**
 * StudyParticipant payload. The Participant API supports sparse updates, so most fields in this class are marked
 * as EncodeDefault.Mode.NEVER.
 * @param firstName First name (given name) of the user.
 * @param lastName Last name (family name) of the user.
 * @param synapseUserId The numerical identifier for a Synapse account. For administrative accounts, this will allow the user to sign in using Synapse accounts, no further credentials are needed to access the system. This value can only be set when creating an account; otherwise the identifiers update API must be used to add the ID to an existing account. 
 * @param id An ID assigned to this account by Bridge system. This ID is exposed in the API and is different from the health code assigned to the user's anonymized data. Bridge never exports this ID along with the health code from Bridge.   
 * @param notifyByEmail True if the user has consented to be contacted via email outside the application, false otherwise. 
 * @param attributes A map of user profile attributes that have been set for this user (the attributes themselves must be specified in the app's configuration, and the values are stored encrypted in case they capture personally-identifying information). 
 * @param sharingScope 
 * @param createdOn The date and time the account was created.
 * @param emailVerified Has the user verified that they have control of this email address?
 * @param phoneVerified Has the user verified that they have control of this phone number?
 * @param status 
 * @param roles 
 * @param dataGroups The data groups set for this user. Data groups must be strings that are defined in the list of all valid data groups for the app, as part of the app object.  
 * @param clientData Client data for a user should be in a syntactically valid JSON format. It will be returned as is to the client (as JSON). 
 * @param languages Two letter language codes to assign to this user (these are initially retrieved from the user's `Accept-Language` header and then persisted as part of account configuration).  
 * @param studyIds The studies this participant is associated to. For administrative accounts, these are the studies associated to the account's organization. For study participants, these will be the studies that the person is enrolled in.
 * @param externalIds The exernal IDs this participant is associated to, mapped to the study that issued the external ID. Typically a user signs up with the external ID, and is assigned to that study as a result.
 * @param orgMembership The identifier of the organization this account is a member of (this will be an administrative account and not a study participant). Once set, it cannot be changed on an update (there are separate organization membership APIs to change organizational membership).
 * @param clientTimeZone Participant's time zone. Can be updated or deleted. Must be an IANA time zone name.
 * @param healthCode Only included in studies that have been configured to return the health code, and only to researchers through the researcher APIs.
 * @param email The user's email.
 * @param phone
 * @param consentHistories A complete historical record of all the user's consents and withdrawals of consent for all studies in the app.
 * @param enrollments Records of every enrollment (whether withdrawn or not) in every study for this participant. The key of this mapping is the studyId, and the value is the record of the enrollment.
 * @param consented True if the user has consented to all required consents, based on the user's most recent request info (client info, languages, data groups). May be null if this object was not constructed with consent histories, or if consent status is indeterminate.
 * @param timeZone User's original time zone, as measured by the timezone used to request activities, as a string offset in ISO8601 format. Related to the v3 scheduling API, it is not always set or reliable.
 * @param type StudyParticipant
 */
@Serializable
data class StudyParticipant (
    /* First name (given name) of the user. */
    @SerialName("firstName")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val firstName: kotlin.String? = null,

    /* Last name (family name) of the user. */
    @SerialName("lastName")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val lastName: kotlin.String? = null,

    /* The numerical identifier for a Synapse account. For administrative accounts, this will allow the user to sign in using Synapse accounts, no further credentials are needed to access the system. This value can only be set when creating an account; otherwise the identifiers update API must be used to add the ID to an existing account.  */
    @SerialName("synapseUserId")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val synapseUserId: kotlin.String? = null,

    //Readonly
    /* An ID assigned to this account by Bridge system. This ID is exposed in the API and is different from the health code assigned to the user's anonymized data. Bridge never exports this ID along with the health code from Bridge.    */
    @SerialName("id")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val id: kotlin.String? = null,

    /* True if the user has consented to be contacted via email outside the application, false otherwise.  */
    @SerialName("notifyByEmail")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val notifyByEmail: kotlin.Boolean = true,

    /* A map of user profile attributes that have been set for this user (the attributes themselves must be specified in the app's configuration, and the values are stored encrypted in case they capture personally-identifying information).  */
    @SerialName("attributes")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val attributes: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,
    
    @SerialName("sharingScope")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val sharingScope: SharingScope? = null,

    //Readonly
    /* The date and time the account was created. */
    @SerialName("createdOn")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val createdOn: kotlin.String? = null,

    /* Has the user verified that they have control of this email address? */
    @SerialName("emailVerified")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val emailVerified: kotlin.Boolean? = null,

    /* Has the user verified that they have control of this phone number? */
    @SerialName("phoneVerified")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val phoneVerified: kotlin.Boolean? = null,
    
    @SerialName("status")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val status: AccountStatus? = null,
    
    @SerialName("roles")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val roles: kotlin.collections.List<Role>? = null,

    /* The data groups set for this user. Data groups must be strings that are defined in the list of all valid data groups for the app, as part of the app object.   */
    @SerialName("dataGroups")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val dataGroups: kotlin.collections.List<kotlin.String>? = null,

    /* Client data for a user should be in a syntactically valid JSON format. It will be returned as is to the client (as JSON).  */
    @SerialName("clientData")
    val clientData: kotlinx.serialization.json.JsonElement? = null,

    /* Two letter language codes to assign to this user (these are initially retrieved from the user's `Accept-Language` header and then persisted as part of account configuration).   */
    @SerialName("languages")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val languages: kotlin.collections.List<kotlin.String>? = null,

    //Readonly
    /* The studies this participant is associated to. For administrative accounts, these are the studies associated to the account's organization. For study participants, these will be the studies that the person is enrolled in. */
    @SerialName("studyIds")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val studyIds: kotlin.collections.List<kotlin.String>? = null,

    /* The exernal IDs this participant is associated to, mapped to the study that issued the external ID. Typically a user signs up with the external ID, and is assigned to that study as a result. */
    @SerialName("externalIds")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val externalIds: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,

    /* The identifier of the organization this account is a member of (this will be an administrative account and not a study participant). Once set, it cannot be changed on an update (there are separate organization membership APIs to change organizational membership). */
    @SerialName("orgMembership")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val orgMembership: kotlin.String? = null,

    /* Participant's time zone. Can be updated or deleted. Must be an IANA time zone name.  */
    @SerialName("clientTimeZone")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val clientTimeZone: kotlin.String? = null,

    /* Only included in studies that have been configured to return the health code, and only to researchers through the researcher APIs.  */
    @SerialName("healthCode")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val healthCode: kotlin.String? = null,

    /* The user's email. */
    @SerialName("email")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val email: kotlin.String? = null,

    @SerialName("phone")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val phone: Phone? = null,

    /* A complete historical record of all the user's consents and withdrawals of consent for all studies in the app.  */
    @SerialName("consentHistories")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val consentHistories: kotlin.collections.Map<kotlin.String, kotlin.collections.List<UserConsentHistory>>? = null,

    /* Records of every enrollment (whether withdrawn or not) in every study for this participant. The key of this mapping is the studyId, and the value is the record of the enrollment. */
    @SerialName("enrollments")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val enrollments: kotlin.collections.Map<kotlin.String, EnrollmentInfo>? = null,

    /* True if the user has consented to all required consents, based on the user's most recent request info (client info, languages, data groups). May be null if this object was not constructed with consent histories, or if consent status is indeterminate.  */
    @SerialName("consented")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val consented: kotlin.Boolean? = null,

    /* User's original time zone, as measured by the timezone used to request activities, as a string offset in ISO8601 format. Related to the v3 scheduling API, it is not always set or reliable. */
    @SerialName("timeZone")
    @EncodeDefault(EncodeDefault.Mode.NEVER)
    val timeZone: kotlin.String? = null,

    /* StudyParticipant */
    @SerialName("type")
    val type: kotlin.String? = null

) {

}

