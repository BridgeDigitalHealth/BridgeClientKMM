/**
* Bridge Server API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 0.25.15
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package org.sagebionetworks.bridge.kmm.shared.models

import org.sagebionetworks.bridge.kmm.shared.models.HealthDataRecord
import org.sagebionetworks.bridge.kmm.shared.models.SynapseExporterStatus
import org.sagebionetworks.bridge.kmm.shared.models.UploadStatus
import kotlinx.serialization.Serializable






import kotlinx.serialization.SerialName
import kotlinx.serialization.json.JsonObject


/**
 * 
 * @param uploadId The GUID assigned to this upoad.
 * @param schemaId The ID of the schema for this upload.
 * @param schemaRevision The revision for the schema of this upload.
 * @param status 
 * @param requestedOn The date and time (ISO 8601 format) that the client requested an URL to make an upload to the server. 
 * @param validationMessageList An array of error messages if this upload did not pass validation. 
 * @param encrypted True if the upload is encrypted. False if it is not encrypted.
 * @param recordId The record ID of the upload in Synapse.
 * @param healthData 
 * @param contentLength The size of the object in bytes. A standard HTTP header. For more information, go to [http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13) 
 * @param contentMd5 The base64-encoded, 128-bit MD5 digest of the upload.
 * @param contentType MIME content type.
 * @param filename Name of the uploaded file.
 * @param completedOn The date and time (ISO 8601 format) that the upload was completed. 
 * @param completedBy Currently the API has an endpoint for the client to call and mark an upload completed. However, there is also a process that detects uploads to S3 and marks the uploads complete. This field indicates which client completed the upload. 
 * @param healthRecordExporterStatus 
 * @param zipped True if the upload is zipped. False if it is a single file.
 * @param type Upload
 */
@Serializable
internal data class Upload (
    /* The GUID assigned to this upoad. */
    
    @SerialName("uploadId")
    val uploadId: kotlin.String,
    /* The ID of the schema for this upload. */
    
    @SerialName("schemaId")
    val schemaId: kotlin.String? = null,
    /* The revision for the schema of this upload. */
    
    @SerialName("schemaRevision")
    val schemaRevision: kotlin.Long? = null,
    
    @SerialName("status")
    val status: UploadStatus,
    /* The date and time (ISO 8601 format) that the client requested an URL to make an upload to the server.  */
    
    @SerialName("requestedOn")
    val requestedOn: kotlin.String,
    /* An array of error messages if this upload did not pass validation.  */
    
    @SerialName("validationMessageList")
    val validationMessageList: kotlin.collections.List<kotlin.String>,
    /* True if the upload is encrypted. False if it is not encrypted. */
    
    @SerialName("encrypted")
    val encrypted: kotlin.Boolean? = null,
    /* The record ID of the upload in Synapse. */
    
    @SerialName("recordId")
    val recordId: kotlin.String? = null,

    @SerialName("metadata")
    val metadata: JsonObject? = null,
    
    @SerialName("healthData")
    val healthData: HealthDataRecord? = null,
    /* The size of the object in bytes. A standard HTTP header. For more information, go to [http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.13)  */
    
    @SerialName("contentLength")
    val contentLength: kotlin.Long? = null,
    /* The base64-encoded, 128-bit MD5 digest of the upload. */
    
    @SerialName("contentMd5")
    val contentMd5: kotlin.String? = null,
    /* MIME content type. */
    
    @SerialName("contentType")
    val contentType: kotlin.String? = null,
    /* Name of the uploaded file. */
    
    @SerialName("filename")
    val filename: kotlin.String? = null,
    /* The date and time (ISO 8601 format) that the upload was completed.  */
    
    @SerialName("completedOn")
    val completedOn: kotlin.String? = null,
    /* Currently the API has an endpoint for the client to call and mark an upload completed. However, there is also a process that detects uploads to S3 and marks the uploads complete. This field indicates which client completed the upload.  */
    
    @SerialName("completedBy")
    val completedBy: Upload.CompletedBy? = null,
    
    @SerialName("healthRecordExporterStatus")
    val healthRecordExporterStatus: SynapseExporterStatus? = null,
    /* True if the upload is zipped. False if it is a single file. */
    
    @SerialName("zipped")
    val zipped: kotlin.Boolean? = null,
    /* Upload */
    
    @SerialName("type")
    val type: kotlin.String? = null

) {

    /**
    * Currently the API has an endpoint for the client to call and mark an upload completed. However, there is also a process that detects uploads to S3 and marks the uploads complete. This field indicates which client completed the upload. 
    * Values: "app","s3_worker"
    */
    @Serializable
    enum class CompletedBy {
    
        @SerialName("app")
        APP,
    
        @SerialName("s3_worker")
        S3_WORKER;
    
    }

}

