/**
 * Bridge Server API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.21.29
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package org.sagebionetworks.bridge.kmm.shared.models

import kotlinx.serialization.json.JsonElement
import kotlinx.serialization.Serializable

import kotlinx.serialization.SerialName
import org.sagebionetworks.bridge.kmm.shared.models.NotificationInfo
import org.sagebionetworks.bridge.kmm.shared.models.PerformanceOrder

/**
 * Information about a session in order to render it in a UI prior to execution.
 * @param guid The unique identifier for this model.
 * @param label A required name for this session that will be shown to schedule authors, and can be used as a label for participants if no label can be found.
 * @param startEventId An identifier for the event which should be used to schedule this sequence of sessions. The identifier may be mapped to a timestamp for a user. If the event ID does not exist for the user, the client should ignore this session and schedule nothing. If the event ID exists, the client should start with that timestamp and schedule forward in time according to the information in the session and its schedule.
 * @param performanceOrder
 * @param timeWindowGuids A list of all the time window GUIDs for this session. The number of time windows in a session can be useful information for some UI grouping tasks.
 * @param minutesToComplete
 * @param notifications
 * @param type SessionInfo
 */
@Serializable
data class SessionInfo (
    /* The unique identifier for this model. */
    @SerialName("guid")
    val guid: kotlin.String,
    /* A required name for this session that will be shown to schedule authors, and can be used as a label for participants if no label can be found. */
    @SerialName("label")
    val label: kotlin.String,
    /* An identifier for the event which should be used to schedule this sequence of sessions. The identifier may be mapped to a timestamp for a user. If the event ID does not exist for the user, the client should ignore this session and schedule nothing. If the event ID exists, the client should start with that timestamp and schedule forward in time according to the information in the session and its schedule. */
    @SerialName("startEventId")
    val startEventId: String,
    @SerialName("performanceOrder")
    val performanceOrder: PerformanceOrder,
    /* A list of all the time window GUIDs for this session. The number of time windows in a session can be useful information for some UI grouping tasks. */
    @SerialName("timeWindowGuids")
    val timeWindowGuids: kotlin.collections.List<kotlin.String>? = null,
    @SerialName("minutesToComplete")
    val minutesToComplete: kotlin.Int? = null,
    @SerialName("notifications")
    val notifications: kotlin.collections.List<NotificationInfo>,
    /* SessionInfo */
    @SerialName("type")
    val type: kotlin.String? = null
) {

}

